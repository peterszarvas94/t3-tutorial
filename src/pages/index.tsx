import { SignInButton, useUser } from "@clerk/nextjs";
import type { NextPage } from "next";
import Image from "next/image";
import Head from "next/head";
import { api } from "~/utils/api";
import type { RouterOutputs } from "~/utils/api";
import { Inter, Noto_Color_Emoji } from 'next/font/google'
import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";
import { LoadingPage } from "~/components/loading";
import { useState } from "react";

// fonts
const notoemoji = Noto_Color_Emoji({
  subsets: ['emoji'],
  weight: ['400'],
});
const inter = Inter({ subsets: ['latin'] });

// dayjs
dayjs.extend(relativeTime);

// CreatePostWizzard
const CreatePostWizzard = () => {
  const { user } = useUser();

  const [input, setInput] = useState("");

  const ctx = api.useContext();

  const { mutate, isLoading: isPosting } = api.posts.create.useMutation({
    onSuccess: () => {
      setInput("");
      void ctx.posts.getAll.invalidate();
    }
  });

  if (!user) return null;

  return (
    <form
      className="flex w-full gap-3"
      onSubmit={(e) => {
        e.preventDefault();
        e.currentTarget.reset();
        mutate({ content: input });
      }}
    >
      <Image
        src={user.profileImageUrl}
        alt="Pofile image"
        className="w-14 h-14 rounded-full" width="56" height="56"
      />

      <input
        placeholder="Type some emojis"
        className="bg-transparent grow outline-none"
        type="text"
        name="content"
        onChange={(e) => setInput(e.target.value)}
        disabled={isPosting}
      />
      <button type="submit">Post</button>
    </form>
  )
};


// PostView
type PostWithUser = RouterOutputs["posts"]["getAll"][number];

const PostView = (props: PostWithUser) => {
  const { post, author } = props;
  return (
    <div key={post.id} className="p-4 border-b border-slate-400 flex gap-3">
      <Image
        src={author.profileImageUrl}
        alt="Pofile image"
        className="w-14 h-14 rounded-full" width="56" height="56"
      />
      <div className="flex flex-col text-slate-300 font-thin">
        <div className="flex gap-1">
          <div className="font-normal">{`@${author.username}`}</div>
          <div>Â·</div>
          <div>{dayjs(post.createdAt).fromNow()}</div>
        </div>
        <span className={`${notoemoji.className} pt-2 text-2xl`}>{post.content}</span>
      </div>
    </div>
  );
};

// Feed
const Feed = () => {
  // It can use the cached data, if already fetched
  const { data, isLoading: postsLoading } = api.posts.getAll.useQuery();

  if (postsLoading) return <LoadingPage />;

  if (!data) return <div>Something went wrong</div>;

  return (
    <div className="flex flex-col">
      {data.map((fullPost) => (
        <PostView {...fullPost} key={fullPost.post.id} />
      ))}
    </div>
  );
}

// Home
const Home: NextPage = () => {
  const { isLoaded: userLoaded, isSignedIn } = useUser();

  // Start fetching asap, cache it
  api.posts.getAll.useQuery();

  if (!userLoaded) return <div />;

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${inter.className} flex justify-center h-screen`}>
        <div className="w-full md:max-w-2xl border-x border-slate-400 h-full">
          <div className="flex border-b border-slate-400 p-4 ">
            {!isSignedIn && (
              <div className="flex justify-center">
                <SignInButton />
              </div>
            )}
            {isSignedIn && <CreatePostWizzard />}
          </div>
          <Feed />
        </div>
      </main>
    </>
  );
};

export default Home;
